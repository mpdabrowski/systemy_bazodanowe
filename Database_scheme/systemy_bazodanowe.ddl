-- Generated by Oracle SQL Developer Data Modeler 24.3.1.351.0831
--   at:        2025-05-03 13:17:36 CEST
--   site:      SQL Server 2012
--   type:      SQL Server 2012



CREATE TABLE address 
    (
     id_address BIGINT NOT NULL , 
     first_name VARCHAR (100) NOT NULL , 
     last_name VARCHAR (100) NOT NULL , 
     email VARCHAR (100) NOT NULL , 
     nip BIGINT , 
     phone_number VARCHAR (20) NOT NULL , 
     street VARCHAR (200) NOT NULL , 
     house_number VARCHAR (10) NOT NULL , 
     appartment_number VARCHAR (10) , 
     postcode VARCHAR (10) NOT NULL , 
     city VARCHAR (50) NOT NULL , 
     country VARCHAR (50) NOT NULL , 
     created_at DATETIME NOT NULL 
    )
GO

ALTER TABLE address ADD CONSTRAINT address_PK PRIMARY KEY CLUSTERED (id_address)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE category 
    (
     id_category BIGINT NOT NULL , 
     name VARCHAR (200) NOT NULL , 
     description TEXT , 
     category_id_category BIGINT NOT NULL , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME , 
     deleted_at DATETIME , 
     category_id_category1 BIGINT NOT NULL 
    )
GO 

    


CREATE UNIQUE NONCLUSTERED INDEX 
    category__IDX ON category 
    ( 
    ) 
GO

ALTER TABLE category ADD CONSTRAINT category_PK PRIMARY KEY CLUSTERED (id_category)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE invoice 
    (
     id_invoice BIGINT NOT NULL , 
     number VARCHAR (100) NOT NULL , 
     created_at DATETIME NOT NULL , 
     id_order BIGINT NOT NULL 
    )
GO

ALTER TABLE invoice ADD CONSTRAINT invoice_PK PRIMARY KEY CLUSTERED (id_invoice)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE notification 
    (
     id_notification BIGINT NOT NULL , 
     type TINYINT NOT NULL DEFAULT 1 , 
     name VARCHAR (200) NOT NULL , 
     content CHAR (1000) NOT NULL , 
     active TINYINT NOT NULL , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME 
    )
GO 


ALTER TABLE notification 
    ADD CONSTRAINT notification_types 
    CHECK ( type IN (1, 2) ) 
GO

ALTER TABLE notification ADD CONSTRAINT notification_PK PRIMARY KEY CLUSTERED (id_notification)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE "order" 
    (
     id_order BIGINT NOT NULL , 
     status INTEGER NOT NULL DEFAULT 1 , 
     number VARCHAR (100) NOT NULL , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME , 
     id_transport_method BIGINT NOT NULL , 
     id_user BIGINT NOT NULL 
    )
GO 


ALTER TABLE "order" 
    ADD 
    CHECK ( status IN (1, 2, 3, 4) ) 
GO

    


CREATE UNIQUE NONCLUSTERED INDEX 
    order__IDX ON "order" 
    ( 
    ) 
GO

ALTER TABLE "order" ADD CONSTRAINT order_PK PRIMARY KEY CLUSTERED (id_order)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE order_has_address 
    (
     id_order_has_address BIGINT NOT NULL , 
     type TINYINT NOT NULL DEFAULT 1 , 
     id_order BIGINT NOT NULL , 
     id_address BIGINT NOT NULL 
    )
GO 


ALTER TABLE order_has_address 
    ADD CONSTRAINT types 
    CHECK ( type IN (, 1, 2, 3) ) 
GO

ALTER TABLE order_has_address ADD CONSTRAINT order_has_address_PK PRIMARY KEY CLUSTERED (id_order_has_address)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE order_status 
    (
     id_order_status BIGINT NOT NULL , 
     code VARCHAR (100) NOT NULL 
    )
GO

ALTER TABLE order_status ADD CONSTRAINT order_status_PK PRIMARY KEY CLUSTERED (id_order_status)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE order_status_has_notification 
    (
     id_order_status BIGINT NOT NULL , 
     id_notification BIGINT NOT NULL 
    )
GO

ALTER TABLE order_status_has_notification ADD CONSTRAINT order_status_has_notification_PK PRIMARY KEY CLUSTERED (id_order_status, id_notification)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE order_status_history 
    (
     id_order_status_history UNKNOWN 
--  ERROR: Datatype UNKNOWN is not allowed 
                    NOT NULL , 
     created_at DATETIME NOT NULL , 
     order_id_order BIGINT NOT NULL , 
     order_status_id_order_status BIGINT NOT NULL 
    )
GO

ALTER TABLE order_status_history ADD CONSTRAINT order_status_history_PK PRIMARY KEY CLUSTERED (id_order_status_history)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE order_status_translation 
    (
     id_order_status_translation UNKNOWN 
--  ERROR: Datatype UNKNOWN is not allowed 
                    NOT NULL , 
     translation VARCHAR (255) NOT NULL , 
     language VARCHAR (10) NOT NULL , 
     id_order_status BIGINT NOT NULL 
    )
GO

ALTER TABLE order_status_translation ADD CONSTRAINT order_status_translation_PK PRIMARY KEY CLUSTERED (id_order_status_translation)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE payment_method 
    (
     id_payment_method BIGINT NOT NULL , 
     name VARCHAR (100) NOT NULL , 
     min_value INTEGER NOT NULL , 
     max_value INTEGER NOT NULL , 
     active BIT NOT NULL DEFAULT 1 , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME , 
     order_id_order BIGINT NOT NULL 
    )
GO 

    


CREATE UNIQUE NONCLUSTERED INDEX 
    payment_method__IDX ON payment_method 
    ( 
     order_id_order 
    ) 
GO

ALTER TABLE payment_method ADD CONSTRAINT payment_method_PK PRIMARY KEY CLUSTERED (id_payment_method)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE payment_transaction 
    (
     id_payment_transaction BIGINT NOT NULL , 
     amount INTEGER NOT NULL DEFAULT 0 , 
     currency VARCHAR (10) NOT NULL , 
     created_at DATETIME NOT NULL , 
     id_payment_method BIGINT NOT NULL , 
     id_order BIGINT NOT NULL 
    )
GO

ALTER TABLE payment_transaction ADD CONSTRAINT payment_transaction_PK PRIMARY KEY CLUSTERED (id_payment_transaction)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE product 
    (
     id_product BIGINT NOT NULL , 
     name VARCHAR (200) NOT NULL , 
     description TEXT , 
     image_url VARCHAR (200) , 
     price INTEGER NOT NULL , 
     currency VARCHAR (5) NOT NULL , 
     stock INTEGER NOT NULL DEFAULT 0 , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME , 
     deleted_at DATETIME , 
     id_category BIGINT NOT NULL 
    )
GO

ALTER TABLE product ADD CONSTRAINT product_PK PRIMARY KEY CLUSTERED (id_product)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE product_attribute 
    (
     id_product_attribute BIGINT NOT NULL , 
     attribute_name VARCHAR (255) NOT NULL , 
     attribute_value TEXT NOT NULL , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME , 
     active BIT NOT NULL DEFAULT 1 , 
     product_id_product BIGINT NOT NULL 
    )
GO

ALTER TABLE product_attribute ADD CONSTRAINT product_attribute_PK PRIMARY KEY CLUSTERED (id_product_attribute)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE Relation_5 
    (
     order_id_order BIGINT NOT NULL , 
     product_id_product BIGINT NOT NULL 
    )
GO

ALTER TABLE Relation_5 ADD CONSTRAINT Relation_5_PK PRIMARY KEY CLUSTERED (order_id_order, product_id_product)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE transport_method 
    (
     id_transport_method BIGINT NOT NULL , 
     name VARCHAR (100) NOT NULL , 
     price INTEGER NOT NULL , 
     max_weight INTEGER NOT NULL , 
     active BIT NOT NULL DEFAULT 1 , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME 
    )
GO 

    


CREATE UNIQUE NONCLUSTERED INDEX 
    transport_method__IDX ON transport_method 
    ( 
    ) 
GO

ALTER TABLE transport_method ADD CONSTRAINT transport_method_PK PRIMARY KEY CLUSTERED (id_transport_method)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

CREATE TABLE "user" 
    (
     id BIGINT NOT NULL , 
     email VARCHAR (100) NOT NULL , 
     first_name VARCHAR (100) NOT NULL , 
     last_name VARCHAR (100) NOT NULL , 
     password TEXT NOT NULL , 
     active BIT NOT NULL DEFAULT 1 , 
     created_at DATETIME NOT NULL , 
     updated_at DATETIME 
    )
GO 

    


CREATE UNIQUE NONCLUSTERED INDEX 
    user__IDX ON "user" 
    ( 
    ) 
GO

ALTER TABLE "user" ADD CONSTRAINT user_PK PRIMARY KEY CLUSTERED (id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON )
GO

ALTER TABLE category 
    ADD CONSTRAINT category_category_FK FOREIGN KEY 
    ( 
     category_id_category
    ) 
    REFERENCES category 
    ( 
     id_category 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE invoice 
    ADD CONSTRAINT invoice_order_FK FOREIGN KEY 
    ( 
     id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_has_address 
    ADD CONSTRAINT order_has_address_address_FK FOREIGN KEY 
    ( 
     id_address
    ) 
    REFERENCES address 
    ( 
     id_address 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_has_address 
    ADD CONSTRAINT order_has_address_order_FK FOREIGN KEY 
    ( 
     id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_status_has_notification 
    ADD CONSTRAINT order_status_has_notification_notification_FK FOREIGN KEY 
    ( 
     id_notification
    ) 
    REFERENCES notification 
    ( 
     id_notification 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_status_has_notification 
    ADD CONSTRAINT order_status_has_notification_order_status_FK FOREIGN KEY 
    ( 
     id_order_status
    ) 
    REFERENCES order_status 
    ( 
     id_order_status 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_status_history 
    ADD CONSTRAINT order_status_history_order_FK FOREIGN KEY 
    ( 
     order_id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_status_history 
    ADD CONSTRAINT order_status_history_order_status_FK FOREIGN KEY 
    ( 
     order_status_id_order_status
    ) 
    REFERENCES order_status 
    ( 
     id_order_status 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE order_status_translation 
    ADD CONSTRAINT order_status_translation_order_status_FK FOREIGN KEY 
    ( 
     id_order_status
    ) 
    REFERENCES order_status 
    ( 
     id_order_status 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE "order" 
    ADD CONSTRAINT order_transport_method_FK FOREIGN KEY 
    ( 
     id_transport_method
    ) 
    REFERENCES transport_method 
    ( 
     id_transport_method 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE "order" 
    ADD CONSTRAINT order_user_FK FOREIGN KEY 
    ( 
     id_user
    ) 
    REFERENCES ""user"" 
    ( 
     id 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE payment_method 
    ADD CONSTRAINT payment_method_order_FK FOREIGN KEY 
    ( 
     order_id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE payment_transaction 
    ADD CONSTRAINT payment_transaction_order_FK FOREIGN KEY 
    ( 
     id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE payment_transaction 
    ADD CONSTRAINT payment_transaction_payment_method_FK FOREIGN KEY 
    ( 
     id_payment_method
    ) 
    REFERENCES payment_method 
    ( 
     id_payment_method 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE product_attribute 
    ADD CONSTRAINT product_attribute_product_FK FOREIGN KEY 
    ( 
     product_id_product
    ) 
    REFERENCES product 
    ( 
     id_product 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE product 
    ADD CONSTRAINT product_category_FK FOREIGN KEY 
    ( 
     id_category
    ) 
    REFERENCES category 
    ( 
     id_category 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE Relation_5 
    ADD CONSTRAINT Relation_5_order_FK FOREIGN KEY 
    ( 
     order_id_order
    ) 
    REFERENCES ""order"" 
    ( 
     id_order 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO

ALTER TABLE Relation_5 
    ADD CONSTRAINT Relation_5_product_FK FOREIGN KEY 
    ( 
     product_id_product
    ) 
    REFERENCES product 
    ( 
     id_product 
    ) 
    ON DELETE NO ACTION 
    ON UPDATE NO ACTION 
GO



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            17
-- CREATE INDEX                             5
-- ALTER TABLE                             38
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE DATABASE                          0
-- CREATE DEFAULT                           0
-- CREATE INDEX ON VIEW                     0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE ROLE                              0
-- CREATE RULE                              0
-- CREATE SCHEMA                            0
-- CREATE SEQUENCE                          0
-- CREATE PARTITION FUNCTION                0
-- CREATE PARTITION SCHEME                  0
-- 
-- DROP DATABASE                            0
-- 
-- ERRORS                                   2
-- WARNINGS                                 0
